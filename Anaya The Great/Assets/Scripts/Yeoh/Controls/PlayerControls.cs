//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Yeoh/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Anaya"",
            ""id"": ""83a93733-68da-4b3e-8be9-837180ce75e5"",
            ""actions"": [
                {
                    ""name"": ""Recall"",
                    ""type"": ""Button"",
                    ""id"": ""7f17d2f3-1265-4f98-a426-7df981aca2a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""73a7fdde-8c54-432c-98a6-4ddd89fea097"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Recall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Wolf"",
            ""id"": ""ab82e1f2-e2dd-4f1b-87f6-f0620c2445ce"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""cc57b99c-f48a-4165-b032-4ad727eecb13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b4dd0c13-e528-48bc-9581-cbddb8d2e522"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Anaya
        m_Anaya = asset.FindActionMap("Anaya", throwIfNotFound: true);
        m_Anaya_Recall = m_Anaya.FindAction("Recall", throwIfNotFound: true);
        // Wolf
        m_Wolf = asset.FindActionMap("Wolf", throwIfNotFound: true);
        m_Wolf_Newaction = m_Wolf.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Anaya
    private readonly InputActionMap m_Anaya;
    private List<IAnayaActions> m_AnayaActionsCallbackInterfaces = new List<IAnayaActions>();
    private readonly InputAction m_Anaya_Recall;
    public struct AnayaActions
    {
        private @PlayerControls m_Wrapper;
        public AnayaActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Recall => m_Wrapper.m_Anaya_Recall;
        public InputActionMap Get() { return m_Wrapper.m_Anaya; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AnayaActions set) { return set.Get(); }
        public void AddCallbacks(IAnayaActions instance)
        {
            if (instance == null || m_Wrapper.m_AnayaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AnayaActionsCallbackInterfaces.Add(instance);
            @Recall.started += instance.OnRecall;
            @Recall.performed += instance.OnRecall;
            @Recall.canceled += instance.OnRecall;
        }

        private void UnregisterCallbacks(IAnayaActions instance)
        {
            @Recall.started -= instance.OnRecall;
            @Recall.performed -= instance.OnRecall;
            @Recall.canceled -= instance.OnRecall;
        }

        public void RemoveCallbacks(IAnayaActions instance)
        {
            if (m_Wrapper.m_AnayaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAnayaActions instance)
        {
            foreach (var item in m_Wrapper.m_AnayaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AnayaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AnayaActions @Anaya => new AnayaActions(this);

    // Wolf
    private readonly InputActionMap m_Wolf;
    private List<IWolfActions> m_WolfActionsCallbackInterfaces = new List<IWolfActions>();
    private readonly InputAction m_Wolf_Newaction;
    public struct WolfActions
    {
        private @PlayerControls m_Wrapper;
        public WolfActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Wolf_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Wolf; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WolfActions set) { return set.Get(); }
        public void AddCallbacks(IWolfActions instance)
        {
            if (instance == null || m_Wrapper.m_WolfActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WolfActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IWolfActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IWolfActions instance)
        {
            if (m_Wrapper.m_WolfActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWolfActions instance)
        {
            foreach (var item in m_Wrapper.m_WolfActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WolfActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WolfActions @Wolf => new WolfActions(this);
    public interface IAnayaActions
    {
        void OnRecall(InputAction.CallbackContext context);
    }
    public interface IWolfActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
